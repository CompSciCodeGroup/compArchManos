package manos;

/**
 *
 * @author mcclainhocklander, chase, justinhill, hunteranderson
 */
//package comp_arch;

import java.util.Random;


public class Manos {

   public static void getNums()
  {

//Global Variables
int acReg = 42;		//Sets global variables to be modified at any point
int pcReg = 12;
int eReg = 1;
int drReg = 13;
int irReg = 120;
int marReg = 0;
int arReg = 80; 
	  * 
	  */
	 //counter
	   
     //Memoryarray[400][1]
	   //loop counter 
	   //registerarray[] = { 800, 400, 200, 100, 80, 40, 20, 10, 8, 4, 2, 1 };
	   
     for(int i = 0; i<399; i++)
     {
       Random gen1 = new Random();

       //memoryarray[i][0]= gen1.nextInt(15);      
     } 
     
     for(int i = 0; i<399; i++)
     {
    	 /*
    	  * if(memoryarray[i][1] == 7
    	  * {
    	  * 	memoryarrry[i][1] = random registerarray[] value
    	  * }
    	  * else
    	  * {
    	  * 	memoryarray[i][1] = gen1.nextInt(399)
    	  * }
    	  */
     }
    
    
     for(int i = rand_pc; i<5; i++)
     {
    	 
    	 /*
    	  * PRINT AND IMPLEMENT THIS 
    	  *
    	  * arReg = pcReg;
		cout << endl;
		cout << irReg << "      " << acReg << "      " << drReg << "      " << pcReg << "      " << arReg << "      "
			<< marReg << "          " << eReg << "      T0" <<endl;				//T0 output
		
		marReg = arrayMEM[pcReg][0] * 1000 + arrayMEM[pcReg][1];
		irReg = marReg;
		pcReg++;//T1
		cout << irReg << "      " << acReg << "      " << drReg << "      " << pcReg << "      " << arReg << "      "
			<< marReg << "          " << eReg << "      T1" <<endl;				//T1 output

		arReg = arrayMEM[arReg][1];
		marReg = arrayMEM[arrayMEM[arReg][1]][0] * 1000 + arrayMEM[arrayMEM[arReg][1]][1];
		cout << irReg << "      " << acReg << "      " << drReg << "      " << pcReg << "      " << arReg << "      "
			<< marReg << "          " << eReg << "      T2" <<endl;				//T2 output
    	  */
       
      
      	//direct version of all memory functions
      	
        if([memoryarray[arReg][0] == 0)
         {
           //And memory word to AC
           /*
            * cout << irReg << "      " << acReg << "      " << drReg << "      " << pcReg << "      " << arReg << "      "
		<< marReg << "          " << eReg << "      T3" << endl;				//T3 output
	drReg = marReg;
	cout << irReg << "      " << acReg << "      " << drReg << "      " << pcReg << "      " << arReg << "      "
		<< marReg << "          " << eReg << "      T4" << endl;				//T3 output
	acReg = acReg & drReg;
	cout << irReg << "      " << acReg << "      " << drReg << "      " << pcReg << "      " << arReg << "      "
		<< marReg << "          " << eReg << "      T5" << endl;				//T3 output
            */
           
         }
         else if(memoryarray[arReg][0] == 1)
         {
           //Add memory word to AC
          /*
           * cout << irReg << "      " << acReg << "      " << drReg << "      " << pcReg << "      " << arReg << "      "
		<< marReg << "          " << eReg << "      T3" << endl;				//T3 output
	drReg = marReg;
	cout << irReg << "      " << acReg << "      " << drReg << "      " << pcReg << "      " << arReg << "      "
		<< marReg << "          " << eReg << "      T4" << endl;				//T3 output
	acReg = drReg + acReg;
	cout << irReg << "      " << acReg << "      " << drReg << "      " << pcReg << "      " << arReg << "      "
		<< marReg << "          " << eReg << "      T5" << endl;				//T3 output
           */
         }
         else if(memoryarray[arReg][0] == 2)
         {
           //Load memory word to AC
          /*
           * cout << irReg << "      " << acReg << "      " << drReg << "      " << pcReg << "      " << arReg << "      "
		<< marReg << "          " << eReg << "      T3" << endl;				//T3 output
	drReg = marReg;
	cout << irReg << "      " << acReg << "      " << drReg << "      " << pcReg << "      " << arReg << "      "
		<< marReg << "          " << eReg << "      T4" << endl;				//T3 output
	acReg = drReg;
	cout << irReg << "      " << acReg << "      " << drReg << "      " << pcReg << "      " << arReg << "      "
		<< marReg << "          " << eReg << "      T5" << endl;				//T3 output
           */
         }
         else if(memoryarray[arReg][0] == 3)
         {
           //Store content of AC in memory
           /*
            * cout << irReg << "      " << acReg << "      " << drReg << "      " << pcReg << "      " << arReg << "      "
		<< marReg << "          " << eReg << "      T3" << endl;				//T3 output
	marReg = acReg;
	cout << irReg << "      " << acReg << "      " << drReg << "      " << pcReg << "      " << arReg << "      "
		<< marReg << "          " << eReg << "      T4" << endl;				//T3 output
            */
           
         }
         else if(memoryarray[arReg][0] == 4)
         {
           //Branch Unconditionally
           /*
            * cout << irReg << "      " << acReg << "      " << drReg << "      " << pcReg << "      " << arReg << "      "
		<< marReg << "          " << eReg << "      T3" << endl;				//T3 output
	pcReg = arReg;
	cout << irReg << "      " << acReg << "      " << drReg << "      " << pcReg << "      " << arReg << "      "
		<< marReg << "          " << eReg << "      T4" << endl;				//T3 output
            */
         }
         else if(memoryarray[arReg][0] == 5)
         {
           //Branch and save return address
           /*
            * cout << irReg << "      " << acReg << "      " << drReg << "      " << pcReg << "      " << arReg << "      "
		<< marReg << "          " << eReg << "      T3" << endl;				//T3 output
	marReg = pcReg;
	arReg++;
	cout << irReg << "      " << acReg << "      " << drReg << "      " << pcReg << "      " << arReg << "      "
		<< marReg << "          " << eReg << "      T4" << endl;				//T3 output
	pcReg = arReg;
	cout << irReg << "      " << acReg << "      " << drReg << "      " << pcReg << "      " << arReg << "      "
		<< marReg << "          " << eReg << "      T5" << endl;				//T3 output
            */
         }
         else if(memoryarray[arReg][0] == 6)
         {
           //Increment and skip if zero
          /*
           * cout << irReg << "      " << acReg << "      " << drReg << "      " << pcReg << "      " << arReg << "      "
		<< marReg << "          " << eReg << "      T3" << endl;				//T3 output
	drReg = marReg;
	cout << irReg << "      " << acReg << "      " << drReg << "      " << pcReg << "      " << arReg << "      "
		<< marReg << "          " << eReg << "      T4" << endl;				//T3 output
	drReg++;
	cout << irReg << "      " << acReg << "      " << drReg << "      " << pcReg << "      " << arReg << "      "
		<< marReg << "          " << eReg << "      T5" << endl;				//T3 output
	marReg = drReg;
	if (drReg == 0)
	{
		pcReg++;
	}
	cout << irReg << "      " << acReg << "      " << drReg << "      " << pcReg << "      " << arReg << "      "
		<< marReg << "          " << eReg << "      T6" << endl;				//T3 output
           */
         }
         else if(memoryarray[arReg][0] == 8)
         {
        	/*
        	 * arReg = arrayMEM[arReg][1];
			marReg = arrayMEM[arrayMEM[arReg][1]][0] * 1000 + arrayMEM[arrayMEM[arReg][1]][1];
			
			then copy paste 0
        	 */
         }
         else if(memoryarray[arReg][0] == 9)
         {
        	 /*
        	  * arReg = arrayMEM[arReg][1];
			marReg = arrayMEM[arrayMEM[arReg][1]][0] * 1000 + arrayMEM[arrayMEM[arReg][1]][1];
			
			then copy paste 1
        	  */
         }
         else if(memoryarray[arReg][0] == 10)
         {
        	 /*
        	  * arReg = arrayMEM[arReg][1];
			marReg = arrayMEM[arrayMEM[arReg][1]][0] * 1000 + arrayMEM[arrayMEM[arReg][1]][1];
			
			then copy paste 2
        	  */
         }
         else if(memoryarray[arReg][0] == 11)
         {
        	 /*
        	  * arReg = arrayMEM[arReg][1];
			marReg = arrayMEM[arrayMEM[arReg][1]][0] * 1000 + arrayMEM[arrayMEM[arReg][1]][1];
			
			then copy paste 3
        	  */
         }
         else if(memoryarray[arReg][0] == 12)
         {
        	 /*
        	  * arReg = arrayMEM[arReg][1];
			marReg = arrayMEM[arrayMEM[arReg][1]][0] * 1000 + arrayMEM[arrayMEM[arReg][1]][1];
			
			then copy paste 4
        	  */
         }
         else if(memoryarray[arReg][0] == 13)
         {
        	 /*
        	  * arReg = arrayMEM[arReg][1];
			marReg = arrayMEM[arrayMEM[arReg][1]][0] * 1000 + arrayMEM[arrayMEM[arReg][1]][1];
			
			then copy paste 5
        	  */
         }
         else if(memoryarray[arReg][0] == 14)
         {
        	 /*
        	  * arReg = arrayMEM[arReg][1];
			marReg = arrayMEM[arrayMEM[arReg][1]][0] * 1000 + arrayMEM[arrayMEM[arReg][1]][1];
			
			then copy paste 6
        	  */
         }
         else if(memorayarray[arReg][0] == 7)
         {
        	   if(arrayMEM[arReg][1] == 1)
               {
                 //Halt Computer and needs output like memory for each t step
                 break;
               }
               else if(arrayMEM[arReg][1] == 2)
               {
                 //Skip next instruction if E is zero and needs output like memory for each t step
                 if(e == 0)
                 {
                   pc++;
                   break;
                 }
                 else
                   break;
               }
               else if(arrayMEM[arReg][1] == 4)
               {
                 //Skip next instruction if AC is zero and needs output like memory for each t step
                 if(ac == 0)
                 {
                   pc++;
                   break;
                 }
                 else
                   break;
               }
               else if(arrayMEM[arReg][1] == 8)
               {
                 //Skip next instruction if AC negative and needs output like memory for each t step
                 if(ac < 0)
                 {
                   pc++;
                 }
                 else
                   break;
               }
               else if(arrayMEM[arReg][1] == 10)
               {
                 //Skip Next Instruction if AC positive and needs output like memory for each t step
                 if(ac > 0)
                 {   
                   pc++;
                 }
                 else
                   break;
               }
               else if(arrayMEM[arReg][1] == 20)
               {
            	   //Increment AC and needs output like memory for each t step
                   ac = Integer.parseInt(binxx[i]);
                   ac++; 
               }
               else if(arrayMEM[arReg][1] == 40)
               {
            	   //Circulate left AC and E and needs output like memory for each t step
                   ac = Integer.parseInt(binxx[i]) << 1;
               }
               else if(arrayMEM[arReg][1] == 80)
               {
            	   //Circulate right AC and E and needs output like memory for each t step
                   ac = Integer.parseInt(binxx[i]) >> 1;
               }
               else if(arrayMEM[arReg][1] == 100)
               {
            	 //Complement E and needs output like memory for each t step
                   e = ~e;
               }
               else if(arrayMEM[arReg][1] == 200)
               {
            	   //Complement AC and needs output like memory for each t step
                   ac = ~ac;
               }
               else if(arrayMEM[arReg][1] == 400)
               {
            	 //Clear E and needs output like memory for each t step
                   e = 0;
               }
               else if(arrayMEM[arReg][1] == 800)
               {
            	   //Clear AC and needs output like memory for each t step
                   ac = 0;
               }
         	}
         }
       }
     
  
}

   public static void main(String[] args) {
     
     System.out.println("First run: ");
     Manos.getNums();
     
     System.out.println("\nRepeat: ");
     Manos.getNums();
     
     System.exit(0);
   }
}
